syntax = "proto3";
package loader;
option go_package = "/api";

enum InfoRequestType {
    System = 0;
    OS  = 1;
    Application = 2;
}

enum PowerStatusCommand{
    Shutdown = 0;
    Restart = 1;
    Logoff = 2;
    RestartTo = 3;
}

message Result{
    int32 Result = 1;
    string Message = 2;
}

message PowerCtlOrder{
    PowerStatusCommand order = 1;
    int32   param = 2;
}

message InfoResponse{
    int32 NodeId = 1;
    string Hostname = 2;
}

message InfoRequest{
    InfoRequestType request = 1;
}

message ExecRequest{
    string Proc = 1;
    repeated string Args = 2;
}

message ExecResponse{
    int32 Status = 1;
    int32 ExitCode = 2;
    optional string Out = 3;
    optional string Err = 4;
}

message ChunkData {
    int32 seq = 1;
    bytes data = 2;
}

message MetaData {
    uint32 size = 1;
    optional string name = 2;
    optional string destination = 3;
}

message UploadRequest{
    oneof data {
        MetaData info = 1;
        ChunkData chunk = 2;
        string hash = 3;
    }
}

message UploadResponse {
    oneof data {
        string progress = 1;
        string status = 2;
    }
}

message Empty{

}

message RecordStatusResponse {
    string status = 1;
    string time = 2;
}

message RecordRequest {
    string command = 1;
}

message RecordResponse {
    string status = 1;
}

service Maintain {
    rpc UpdateLoader(stream UploadRequest) returns (stream UploadResponse){}
}

service Loader {
    rpc PowerCtl(PowerCtlOrder) returns (Result){}
}

service Deployment{
    rpc Info(InfoRequest) returns (InfoResponse){}
    rpc Exec(ExecRequest) returns (ExecResponse){}
    rpc Upload(stream UploadRequest) returns (stream UploadResponse){}
}

service Recording{
    rpc Status(Empty) returns (RecordStatusResponse){}
    rpc RecordControl(RecordRequest) returns (RecordResponse){}
}
