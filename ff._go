package main

import (
	"log"
	"net"
	"syscall"
	"time"
	"tr/com/havelsan/hloader/util"
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	modiphlpapi              = windows.NewLazySystemDLL("iphlpapi.dll")
	procGetAdaptersAddresses = modiphlpapi.NewProc("NotifyIpInterfaceChange")
)

type NL_ROUTER_DISCOVERY_BEHAVIOR int

const (
	RouterDiscoveryDisabled  NL_ROUTER_DISCOVERY_BEHAVIOR = 0
	RouterDiscoveryEnabled                                = 1
	RouterDiscoveryDhcp                                   = 2
	RouterDiscoveryUnchanged                              = -1
)

type MIB_IPINTERFACE_ROWA struct {
	Family uint16
	// Net_UID                        uint64
	// IfIndex                        C.ulong
	// MaxReassemblySize              C.ulong
	// InterfaceIdentifier            C.ulonglong
	// MinRouterAdvertisementInterval C.ulong
	// MaxRouterAdvertisementInterval C.ulong

	// AdvertisingEnabled                   bool
	// ForwardingEnabled                    bool
	// WeakHostSend                         bool
	// WeakHostReceive                      bool
	// UseAutomaticMetric                   bool
	// UseNeighborUnreachabilityDetection   bool
	// ManagedAddressConfigurationSupported bool
	// OtherStatefulConfigurationSupported  bool
	// AdvertiseDefaultRoute                bool

	// RouterDiscoveryBehavior NL_ROUTER_DISCOVERY_BEHAVIOR

	// DadTransmits            C.ulong
	// BaseReachableTime       C.ulong
	// RetransmitTime          C.ulong
	// PathMtuDiscoveryTimeout C.ulong

	// LinkLocalAddressBehavior int

	// LinkLocalAddressTimeout C.ulong
	// ZoneIndices             [16]C.ulong
	// SitePrefixLength        C.ulong
	// Metric                  C.ulong
	// NlMtu                   C.ulong

	// Connected bool
	// SupportsWakeUpPatterns    bool
	// SupportsNeighborDiscovery bool
	// SupportsRouterDiscovery   bool

	// ReachableTime C.ulong

}

var (
	isUp bool = false
)

func setState(state bool) {
	if isUp != state {
		isUp = state
		if isUp {
			log.Println("UP")
		} else {
			log.Println("DOWN")
		}
	}
}
func main() {
	log.Println("Stop encoding")
	var hand windows.Handle
	cb := syscall.NewCallback(func(ctx uintptr, row uintptr, changeType uintptr) uint64 {
		//log.Println("Change", ctx, row, changeType)
		iface, _ := util.InterfaceByAddress("10.3.")
		if iface != nil && (iface.Flags&net.FlagUp) > 0 {
			setState(true)

		} else {
			setState(false)
		}
		return 0
	})
	r1, r2, err := procGetAdaptersAddresses.Call(2, cb, uintptr(unsafe.Pointer(nil)), 1, uintptr(unsafe.Pointer(&hand)))
	log.Println(r1, r2, err)
	for {
		time.Sleep(time.Second)
	}

}
