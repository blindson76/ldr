// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/loader.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Maintain_UpdateLoader_FullMethodName = "/loader.Maintain/UpdateLoader"
	Maintain_FormatDisks_FullMethodName  = "/loader.Maintain/FormatDisks"
	Maintain_ApplyImage_FullMethodName   = "/loader.Maintain/ApplyImage"
	Maintain_BCDFix_FullMethodName       = "/loader.Maintain/BCDFix"
)

// MaintainClient is the client API for Maintain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintainClient interface {
	UpdateLoader(ctx context.Context, opts ...grpc.CallOption) (Maintain_UpdateLoaderClient, error)
	FormatDisks(ctx context.Context, in *PartitionRequest, opts ...grpc.CallOption) (Maintain_FormatDisksClient, error)
	ApplyImage(ctx context.Context, in *ApplyImageRequest, opts ...grpc.CallOption) (Maintain_ApplyImageClient, error)
	BCDFix(ctx context.Context, in *BCDFixRequest, opts ...grpc.CallOption) (*BCDFixResponse, error)
}

type maintainClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintainClient(cc grpc.ClientConnInterface) MaintainClient {
	return &maintainClient{cc}
}

func (c *maintainClient) UpdateLoader(ctx context.Context, opts ...grpc.CallOption) (Maintain_UpdateLoaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Maintain_ServiceDesc.Streams[0], Maintain_UpdateLoader_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &maintainUpdateLoaderClient{stream}
	return x, nil
}

type Maintain_UpdateLoaderClient interface {
	Send(*UploadRequest) error
	Recv() (*UploadResponse, error)
	grpc.ClientStream
}

type maintainUpdateLoaderClient struct {
	grpc.ClientStream
}

func (x *maintainUpdateLoaderClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maintainUpdateLoaderClient) Recv() (*UploadResponse, error) {
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maintainClient) FormatDisks(ctx context.Context, in *PartitionRequest, opts ...grpc.CallOption) (Maintain_FormatDisksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Maintain_ServiceDesc.Streams[1], Maintain_FormatDisks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &maintainFormatDisksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Maintain_FormatDisksClient interface {
	Recv() (*PartitionResponse, error)
	grpc.ClientStream
}

type maintainFormatDisksClient struct {
	grpc.ClientStream
}

func (x *maintainFormatDisksClient) Recv() (*PartitionResponse, error) {
	m := new(PartitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maintainClient) ApplyImage(ctx context.Context, in *ApplyImageRequest, opts ...grpc.CallOption) (Maintain_ApplyImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Maintain_ServiceDesc.Streams[2], Maintain_ApplyImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &maintainApplyImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Maintain_ApplyImageClient interface {
	Recv() (*AplyImageStatus, error)
	grpc.ClientStream
}

type maintainApplyImageClient struct {
	grpc.ClientStream
}

func (x *maintainApplyImageClient) Recv() (*AplyImageStatus, error) {
	m := new(AplyImageStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maintainClient) BCDFix(ctx context.Context, in *BCDFixRequest, opts ...grpc.CallOption) (*BCDFixResponse, error) {
	out := new(BCDFixResponse)
	err := c.cc.Invoke(ctx, Maintain_BCDFix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintainServer is the server API for Maintain service.
// All implementations must embed UnimplementedMaintainServer
// for forward compatibility
type MaintainServer interface {
	UpdateLoader(Maintain_UpdateLoaderServer) error
	FormatDisks(*PartitionRequest, Maintain_FormatDisksServer) error
	ApplyImage(*ApplyImageRequest, Maintain_ApplyImageServer) error
	BCDFix(context.Context, *BCDFixRequest) (*BCDFixResponse, error)
	mustEmbedUnimplementedMaintainServer()
}

// UnimplementedMaintainServer must be embedded to have forward compatible implementations.
type UnimplementedMaintainServer struct {
}

func (UnimplementedMaintainServer) UpdateLoader(Maintain_UpdateLoaderServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateLoader not implemented")
}
func (UnimplementedMaintainServer) FormatDisks(*PartitionRequest, Maintain_FormatDisksServer) error {
	return status.Errorf(codes.Unimplemented, "method FormatDisks not implemented")
}
func (UnimplementedMaintainServer) ApplyImage(*ApplyImageRequest, Maintain_ApplyImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ApplyImage not implemented")
}
func (UnimplementedMaintainServer) BCDFix(context.Context, *BCDFixRequest) (*BCDFixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BCDFix not implemented")
}
func (UnimplementedMaintainServer) mustEmbedUnimplementedMaintainServer() {}

// UnsafeMaintainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintainServer will
// result in compilation errors.
type UnsafeMaintainServer interface {
	mustEmbedUnimplementedMaintainServer()
}

func RegisterMaintainServer(s grpc.ServiceRegistrar, srv MaintainServer) {
	s.RegisterService(&Maintain_ServiceDesc, srv)
}

func _Maintain_UpdateLoader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaintainServer).UpdateLoader(&maintainUpdateLoaderServer{stream})
}

type Maintain_UpdateLoaderServer interface {
	Send(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type maintainUpdateLoaderServer struct {
	grpc.ServerStream
}

func (x *maintainUpdateLoaderServer) Send(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maintainUpdateLoaderServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Maintain_FormatDisks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PartitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaintainServer).FormatDisks(m, &maintainFormatDisksServer{stream})
}

type Maintain_FormatDisksServer interface {
	Send(*PartitionResponse) error
	grpc.ServerStream
}

type maintainFormatDisksServer struct {
	grpc.ServerStream
}

func (x *maintainFormatDisksServer) Send(m *PartitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Maintain_ApplyImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaintainServer).ApplyImage(m, &maintainApplyImageServer{stream})
}

type Maintain_ApplyImageServer interface {
	Send(*AplyImageStatus) error
	grpc.ServerStream
}

type maintainApplyImageServer struct {
	grpc.ServerStream
}

func (x *maintainApplyImageServer) Send(m *AplyImageStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Maintain_BCDFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BCDFixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainServer).BCDFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintain_BCDFix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainServer).BCDFix(ctx, req.(*BCDFixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Maintain_ServiceDesc is the grpc.ServiceDesc for Maintain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Maintain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loader.Maintain",
	HandlerType: (*MaintainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BCDFix",
			Handler:    _Maintain_BCDFix_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateLoader",
			Handler:       _Maintain_UpdateLoader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FormatDisks",
			Handler:       _Maintain_FormatDisks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ApplyImage",
			Handler:       _Maintain_ApplyImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/loader.proto",
}

const (
	Loader_PowerCtl_FullMethodName = "/loader.Loader/PowerCtl"
)

// LoaderClient is the client API for Loader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoaderClient interface {
	PowerCtl(ctx context.Context, in *PowerCtlOrder, opts ...grpc.CallOption) (*Result, error)
}

type loaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLoaderClient(cc grpc.ClientConnInterface) LoaderClient {
	return &loaderClient{cc}
}

func (c *loaderClient) PowerCtl(ctx context.Context, in *PowerCtlOrder, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, Loader_PowerCtl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoaderServer is the server API for Loader service.
// All implementations must embed UnimplementedLoaderServer
// for forward compatibility
type LoaderServer interface {
	PowerCtl(context.Context, *PowerCtlOrder) (*Result, error)
	mustEmbedUnimplementedLoaderServer()
}

// UnimplementedLoaderServer must be embedded to have forward compatible implementations.
type UnimplementedLoaderServer struct {
}

func (UnimplementedLoaderServer) PowerCtl(context.Context, *PowerCtlOrder) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerCtl not implemented")
}
func (UnimplementedLoaderServer) mustEmbedUnimplementedLoaderServer() {}

// UnsafeLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoaderServer will
// result in compilation errors.
type UnsafeLoaderServer interface {
	mustEmbedUnimplementedLoaderServer()
}

func RegisterLoaderServer(s grpc.ServiceRegistrar, srv LoaderServer) {
	s.RegisterService(&Loader_ServiceDesc, srv)
}

func _Loader_PowerCtl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerCtlOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoaderServer).PowerCtl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loader_PowerCtl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoaderServer).PowerCtl(ctx, req.(*PowerCtlOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// Loader_ServiceDesc is the grpc.ServiceDesc for Loader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loader.Loader",
	HandlerType: (*LoaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PowerCtl",
			Handler:    _Loader_PowerCtl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loader.proto",
}

const (
	Deployment_Info_FullMethodName   = "/loader.Deployment/Info"
	Deployment_Exec_FullMethodName   = "/loader.Deployment/Exec"
	Deployment_Upload_FullMethodName = "/loader.Deployment/Upload"
)

// DeploymentClient is the client API for Deployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Deployment_UploadClient, error)
}

type deploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentClient(cc grpc.ClientConnInterface) DeploymentClient {
	return &deploymentClient{cc}
}

func (c *deploymentClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Deployment_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Deployment_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Deployment_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deployment_ServiceDesc.Streams[0], Deployment_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentUploadClient{stream}
	return x, nil
}

type Deployment_UploadClient interface {
	Send(*UploadRequest) error
	Recv() (*UploadResponse, error)
	grpc.ClientStream
}

type deploymentUploadClient struct {
	grpc.ClientStream
}

func (x *deploymentUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deploymentUploadClient) Recv() (*UploadResponse, error) {
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeploymentServer is the server API for Deployment service.
// All implementations must embed UnimplementedDeploymentServer
// for forward compatibility
type DeploymentServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Upload(Deployment_UploadServer) error
	mustEmbedUnimplementedDeploymentServer()
}

// UnimplementedDeploymentServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentServer struct {
}

func (UnimplementedDeploymentServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedDeploymentServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDeploymentServer) Upload(Deployment_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDeploymentServer) mustEmbedUnimplementedDeploymentServer() {}

// UnsafeDeploymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServer will
// result in compilation errors.
type UnsafeDeploymentServer interface {
	mustEmbedUnimplementedDeploymentServer()
}

func RegisterDeploymentServer(s grpc.ServiceRegistrar, srv DeploymentServer) {
	s.RegisterService(&Deployment_ServiceDesc, srv)
}

func _Deployment_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeploymentServer).Upload(&deploymentUploadServer{stream})
}

type Deployment_UploadServer interface {
	Send(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type deploymentUploadServer struct {
	grpc.ServerStream
}

func (x *deploymentUploadServer) Send(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deploymentUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deployment_ServiceDesc is the grpc.ServiceDesc for Deployment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loader.Deployment",
	HandlerType: (*DeploymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Deployment_Info_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Deployment_Exec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Deployment_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/loader.proto",
}

const (
	Recording_Status_FullMethodName        = "/loader.Recording/Status"
	Recording_RecordControl_FullMethodName = "/loader.Recording/RecordControl"
)

// RecordingClient is the client API for Recording service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingClient interface {
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecordStatusResponse, error)
	RecordControl(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordingClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingClient(cc grpc.ClientConnInterface) RecordingClient {
	return &recordingClient{cc}
}

func (c *recordingClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecordStatusResponse, error) {
	out := new(RecordStatusResponse)
	err := c.cc.Invoke(ctx, Recording_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingClient) RecordControl(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, Recording_RecordControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordingServer is the server API for Recording service.
// All implementations must embed UnimplementedRecordingServer
// for forward compatibility
type RecordingServer interface {
	Status(context.Context, *Empty) (*RecordStatusResponse, error)
	RecordControl(context.Context, *RecordRequest) (*RecordResponse, error)
	mustEmbedUnimplementedRecordingServer()
}

// UnimplementedRecordingServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingServer struct {
}

func (UnimplementedRecordingServer) Status(context.Context, *Empty) (*RecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRecordingServer) RecordControl(context.Context, *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordControl not implemented")
}
func (UnimplementedRecordingServer) mustEmbedUnimplementedRecordingServer() {}

// UnsafeRecordingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingServer will
// result in compilation errors.
type UnsafeRecordingServer interface {
	mustEmbedUnimplementedRecordingServer()
}

func RegisterRecordingServer(s grpc.ServiceRegistrar, srv RecordingServer) {
	s.RegisterService(&Recording_ServiceDesc, srv)
}

func _Recording_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recording_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recording_RecordControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServer).RecordControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recording_RecordControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServer).RecordControl(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recording_ServiceDesc is the grpc.ServiceDesc for Recording service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recording_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loader.Recording",
	HandlerType: (*RecordingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Recording_Status_Handler,
		},
		{
			MethodName: "RecordControl",
			Handler:    _Recording_RecordControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loader.proto",
}
